<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/style2.css' />
  </head>
  <body>
    <h1 id="title">
      <p>Music In Motion</p>
    </h1>
    <div id="container">
      <div id="left">
        <div id="genreList">
          <div class="genreBox" id="genreBox0">Ambient</div>
          <div class="genreBox" id="genreBox1">Classical</div>
          <div class="genreBox" id="genreBox2">Country</div>
          <div class="genreBox" id="genreBox3">Dance</div>
          <div class="genreBox" id="genreBox4">Electronic</div>
          <div class="genreBox" id="genreBox5">Folk</div>
        </div>
      </div>
      <div id="right">
        <div id="soundArea">
          <div class="cb toggle-fbo">
            <input class="toggle" type="checkbox"/>
          </div>
          <div id="metadata">
            <span id="soundcloudLink">
              <iframe allowtransparency="true" scrolling="no" frameborder="no" src="https://w.soundcloud.com/icon/?url=http%3A%2F%2Fsoundcloud.com%2Fuser599065434&color=black_white&size=32" style="width: 32px; height: 32px;"></iframe> 
            </span>
            <p id="song_title"></p><p id="user"></p>
          </div>
          <div id="soundPlayer">
              <img id="soundImage" class="soundImage"/>
          </div>
        </div>

        <div id="playlistArea">
          <div class="playlist" id="p1"><p>playlist 1</p></div>
          <div class="playlist" id="p2"><p>playlist 2</p></div>
          <div class="playlist" id="p3"><p>playlist 3</p></div>
          <div class="playlist" id="p4"><p>playlist 4</p></div>
        </div>


      </div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script src="http://connect.soundcloud.com/sdk.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
    <script src="https://js.leapmotion.com/0.2.0/leap.min.js"></script>

    <div class="cb toggle-fbo">
      <input class="toggle" type="checkbox"/>
    </div>

    <script>
      var CIRCLE_DURATION = 750;
      var CIRCLE_RADIUS = 50;
      var CIRCLE_PROGRESS = 0.8;
      var SWIPE_DURATION = 150;
      var SWIPE_DISTANCE = 175;
      var GESTURE_DELAY = 500;
      var SCROLL_THRESHOLD_VERTICAL = 0.60;
      var SCROLL_THRESHOLD_HORIZONTAL = 0.40;
      var SCROLL_TIME = 800;

      var timeStartScroll = 0;
      var scrollDirection = -1; // None = -1, Left = 0, Right = 1, Up = 2, Down = 3.

      var timeLastGesture = new Date().getTime();

      var controller = new Leap.Controller({enableGestures: true, frameEventName: "animationFrame"});
      controller.on('connect', function() {
        console.log('Sucessfully connected');
      });

      controller.on('deviceConnected', function() {
        console.log('A Leap device has been connected');
      });

      controller.on('deviceDisconnected', function() {
        console.log('A Leap device has been disconnected');
      });

      controller.on('ready', function() {
        console.log('Started Leap');
      });

      controller.on('animationFrame', function(frame) {

        var timeCurGesture = new Date().getTime();
        var timeSinceLastGesture = timeCurGesture - timeLastGesture;
        if (timeSinceLastGesture > GESTURE_DELAY) {
          var numFingers = frame.fingers.length;
          var seenGesture = false;

          if (numFingers == 2 &&
            frame.hands.length == 1 &&
            frame.hands[0].fingers.length > 0) {

            var curTime = new Date().getTime();
            if (scrollDirection == -1) {
              timeStartScroll = curTime;
            }
            var timeInScroll = curTime - timeStartScroll;

            var direction = frame.hands[0].fingers[0].direction;
            var isHorizontal = Math.abs(direction[0]) > Math.abs(direction[1]);

            if (isHorizontal) {
              if (direction[0] > SCROLL_THRESHOLD_HORIZONTAL) {
                scrollDirection = 1;
              } else if (direction[0] < -SCROLL_THRESHOLD_HORIZONTAL) {
                scrollDirection = 0;
              }
            } else {
              if (direction[1] > SCROLL_THRESHOLD_VERTICAL) {
                scrollDirection = 2;
              } else if (direction[1] < -SCROLL_THRESHOLD_VERTICAL) {
                scrollDirection = 3;
              }
            }

            if (timeInScroll >= SCROLL_TIME) {
              seenGesture = true;
              //console.log('scroll direction: ' + scrollDirection);
              switch(scrollDirection) {
                case 0:
                  // left
                  break;
                case 1:
                  // right
                  break;
                case 2:
                  // up
                  scrollUp();
                  console.log("scrolling up");
                  break;
                case 3:
                  // down
                  console.log("scroll down");
                  scrollDown();
                  break;
              }
              scrollDirection = -1;
            }
          }

          if (frame.hands.length == 1 && frame.fingers.length == 0) {
            // TODO: also select playlist
            selectGroup();
          }

          for (var i = 0; i < frame.gestures.length; i++) {
            var gesture = frame.gestures[i];
            var type = gesture.type;
            switch(type) {
              case "circle":
                seenGesture = OnCircle(gesture);
                break;
              case "swipe":
                seenGesture = OnSwipe(gesture, numFingers);
                break;
              case "screenTap":
                seenGesture = OnScreenTap(gesture, numFingers);
                break;
              case "keyTap":
                seenGesture = OnKeyTap(gesture, numFingers);
                break;
            }

            if (seenGesture) {
              timeLastGesture = timeCurGesture;
              break;
            }
          }
        }
      });

      function OnCircle(gesture) {
        if (gesture.duration >= CIRCLE_DURATION && 
          gesture.state == 'stop' &&
          gesture.progress >= CIRCLE_PROGRESS &&
          gesture.radius >= CIRCLE_RADIUS) {
            var clockwise = gesture.normal[2] <= 0;
            clockwise ? console.log('circle clockwise') : console.log('circle counter-clockwise');
            var amountIncrease = Math.round(gesture.progress);
            if (clockwise) {
              // TURN UP VOLUME
              for (var i = 0; i < amountIncrease; i++) {
                raiseVolume();
                console.log("volume up");
              }
            } else {
              // turn down volume
              for (var i = 0; i < amountIncrease; i++) {
                lowerVolume();
                console.log("volume down");
              }
            }
            return true;
        }
        return false;
      }

      function OnSwipe(gesture, numFingers) {
        var distance = Math.max(Math.abs(gesture.startPosition[0] - gesture.position[0]), Math.abs(gesture.startPosition[1] - gesture.position[1]));
        if (gesture.duration >= SWIPE_DURATION &&
          gesture.state == 'stop' &&
          distance >= SWIPE_DISTANCE &&
          numFingers > 2) {
          var isHorizontal = Math.abs(gesture.direction[0]) > Math.abs(gesture.direction[1]);
          if (isHorizontal) {
            if (gesture.direction[0] > 0) { // Swiped Right
              // NEXT SONG
              playNextTrack();
            } else { // Swipe Left
              // PREVIOUS SONG
              playPrevTrack();
            }
          } else {
            if (gesture.direction[1] > 0) { // Swipe up
              // UNDO MOST RECENT SONG ADDED OUT
            } else { // Swipe down
              // ADD TO HIGHLIGHTED PLAYLIST

            }
          }
          return true;
        }
        return false;
      }

      function OnScreenTap(gesture, numFingers) {
        if (numFingers == 1) {
          // TOGGLE PLAYLIST/GENRE LIST
          console.log('screepTap');
          toggleSelection();
          return true;
        }
        return false;
      }

      function OnKeyTap(gesture, numFingers) {
        if (gesture.pointableIds.length == 1 &&
          numFingers == 5 &&
          Math.abs(gesture.direction[0] < 0.2)) {
          console.log('keyTap');
          // PLAY/PAUSE
          togglePauseTrack();
          return true;
        }

        return false;
      }

      controller.connect();
    </script>

    <script src="javascripts/vendor/sketch.min.js"></script>
    <script src="javascripts/vendor/stats.min.js"></script>
    <script src="javascripts/vendor/leap.min.js"></script>
    <script src="javascripts/particles.js"></script>
    <script src="/javascripts/index.js"></script>

  </body>
</html>
